{"version":3,"sources":["dashboard/pages/entries/entries.js","dashboard/listItems.js","dashboard/Dashboard.js"],"names":["useStyles","makeStyles","theme","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","spacing","breakpoints","up","appBarSpacer","content","height","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","table","minWidth","paperr","addIcon","float","marginTop","Entries","classes","useState","offset","setOffset","records","setRecords","total","setTotal","perPage","setPerPage","getRequestOptions","useCallback","headers","Authorization","localStorage","getItem","updatePage","axios","get","process","params","page","parseInt","then","resp","data","per_page","catch","err","response","status","removeItem","history","push","useEffect","React","editingRecord","setEditingRecord","open","setOpen","handleClickOpen","row","Object","assign","keys","length","phrase","example","meaning","meaning_fa","handleClose","open2","setOpen2","deletingRecord","setDeletingRecord","handleClose2","editRecord","field","value","target","onClose","aria-labelledby","id","autoFocus","margin","label","type","fullWidth","onChange","event","multiline","onClick","color","url","post","done","updateRecord","aria-describedby","delete","className","aria-label","map","key","size","handleClickOpen2","limit","e","mainListItems","ListItem","button","ListItemIcon","ListItemText","primary","component","href","Copyright","Typography","variant","align","Link","Date","getFullYear","Dashboard","props","CssBaseline","AppBar","clsx","Toolbar","IconButton","edge","noWrap","Drawer","Divider","List","Container","maxWidth","children","Box","pt"],"mappings":"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","file":"static/js/11.1f6b0847.chunk.js","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react';\nimport Dashboard from \"../../Dashboard\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {makeStyles} from \"@material-ui/core\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Pagination from \"material-ui-flat-pagination\";\nimport axios from \"axios\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport Fab from \"@material-ui/core/Fab\";\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddIcon from '@material-ui/icons/Add';\nimport {history} from \"react-router-guard\";\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n    },\n    toolbar: {\n        paddingRight: 24, // keep right padding when drawer closed\n    },\n    toolbarIcon: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: '0 8px',\n        ...theme.mixins.toolbar,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    menuButtonHidden: {\n        display: 'none',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    drawerPaper: {\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerPaperClose: {\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(7),\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9),\n        },\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        height: 240,\n    },\n    table: {\n        minWidth: 650,\n    },\n    paperr: {\n        width: '100%',\n        overflowX: 'auto',\n    },\n    addIcon: {\n        float: 'right',\n        marginTop: '16px'\n    }\n}));\n\n\nexport default function Entries() {\n    const classes = useStyles();\n    const [offset, setOffset] = useState(1);\n    const [records, setRecords] = useState([]);\n    const [total, setTotal] = useState(0);\n    const [perPage, setPerPage] = useState(10);\n\n    const getRequestOptions = useCallback(() => {\n        return {\n            headers: {\n                Authorization: 'Bearer ' + localStorage.getItem('access_token')\n            }\n        };\n    }, []);\n\n    const updatePage = useCallback((offset, perPage) => {\n        const url = process.env.REACT_APP_API_BASE_URL + '/api/dictionary/entries';\n        axios.get(url, {...{\n                params: {\n                    page: parseInt(offset / perPage) + 1\n                }\n            }, ...getRequestOptions()}).then((resp) => {\n            setRecords(resp.data.data);\n            setTotal(resp.data.total);\n            setPerPage(resp.data.per_page);\n        }).catch(err => {\n            if (err.response.status === 403) {\n                localStorage.removeItem('access_token');\n                localStorage.removeItem('expires_in');\n                history.push('/login');\n            }\n        });\n    }, [setRecords, setTotal, setPerPage, getRequestOptions]);\n\n    useEffect(() => {\n        updatePage(offset, perPage);\n    }, [offset, perPage, updatePage]);\n\n\n\n    const [editingRecord, setEditingRecord] = React.useState({});\n\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = (row) => {\n        let editingRecord = Object.assign({}, row);\n        if (Object.keys(editingRecord).length === 0) {\n            editingRecord = {\n                phrase: '',\n                example: '',\n                meaning: '',\n                meaning_fa: '',\n            };\n        }\n        setEditingRecord(editingRecord);\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n\n\n\n    const [open2, setOpen2] = React.useState(false);\n    const [deletingRecord, setDeletingRecord] = React.useState({});\n\n\n\n    const handleClickOpen2 = (row) => {\n        setDeletingRecord(row);\n        setOpen2(true);\n    };\n\n    const handleClose2 = () => {\n        setOpen2(false);\n    };\n\n    const editRecord = (field, value) => {\n        const target = Object.assign({}, editingRecord);\n        target[field] = value;\n        setEditingRecord(target);\n    };\n\n    const deletePhrase = () => {\n        axios.delete(process.env.REACT_APP_API_BASE_URL + '/api/dictionary/entries/' + deletingRecord.id, getRequestOptions())\n            .then(resp => {\n\n                if (resp.data.done) {\n                    setOpen2(false);\n                    updatePage(offset, perPage);\n                }\n            })\n            .catch((err) => {\n            });\n    };\n\n    const updateRecord = () => {\n        const url = process.env.REACT_APP_API_BASE_URL + '/api/dictionary/entries' + (editingRecord.id ? '/' + editingRecord.id : '');\n\n        axios.post(url, editingRecord, getRequestOptions())\n            .then(resp => {\n\n                if (resp.data.done) {\n                    setOpen(false);\n                    updatePage(offset, perPage);\n                }\n            })\n            .catch((err) => {\n            });\n    };\n    return (\n        <Dashboard>\n\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Edit entry</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Edit the entry\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"phrase\"\n                        label=\"Phrase\"\n                        type=\"text\"\n                        fullWidth\n                        value={editingRecord.phrase}\n                        onChange={(event) => {editRecord('phrase', event.target.value)}}\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        id=\"phrase\"\n                        label=\"Example\"\n                        type=\"text\"\n                        fullWidth\n                        multiline\n                        value={editingRecord.example}\n                        onChange={(event) => {editRecord('example', event.target.value)}}\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        id=\"meaning\"\n                        label=\"Meaning\"\n                        type=\"text\"\n                        fullWidth\n                        value={editingRecord.meaning}\n                        onChange={(event) => {editRecord('meaning', event.target.value)}}\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        id=\"meaning\"\n                        label=\"Translation\"\n                        type=\"text\"\n                        fullWidth\n                        value={editingRecord.meaning_fa}\n                        onChange={(event) => {editRecord('meaning_fa', event.target.value)}}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={() => {updateRecord()}} color=\"primary\">\n                        Change\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n\n\n\n\n\n\n\n\n\n            <Dialog\n                open={open2}\n                onClose={handleClose2}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">Are you sure you want to delete?</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        Are you sure you want to delete the phrase \"{deletingRecord.phrase}\"\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose2} color=\"primary\">\n                        No\n                    </Button>\n                    <Button onClick={deletePhrase} color=\"primary\" autoFocus>\n                        Yes\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n\n\n\n\n            <Paper className={classes.paperr}>\n                <Table className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Phrase</TableCell>\n                            <TableCell>Example</TableCell>\n                            <TableCell>Meaning</TableCell>\n                            <TableCell>Translation</TableCell>\n                            <TableCell>Actions</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {records.map(row => (\n                            <TableRow key={row.id}>\n                                <TableCell>{row.phrase}</TableCell>\n                                <TableCell>{row.example}</TableCell>\n                                <TableCell>{row.meaning}</TableCell>\n                                <TableCell>{row.meaning_fa}</TableCell>\n                                <TableCell>\n                                    <Fab color=\"primary\" size=\"small\" aria-label=\"edit\" onClick={() => {handleClickOpen(row)}}>\n                                        <EditIcon />\n                                    </Fab>\n                                    <Fab color=\"secondary\" size=\"small\" aria-label=\"remove\" onClick={() => {handleClickOpen2(row)}}>\n                                        <DeleteIcon />\n                                    </Fab>\n\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </Paper>\n            <Fab color=\"primary\" aria-label=\"add\" className={classes.addIcon} size=\"large\" onClick={() => {handleClickOpen({})}}>\n                <AddIcon />\n            </Fab>\n\n            <br/>\n            <Pagination\n                limit={perPage}\n                offset={offset}\n                total={total}\n                onClick={(e, offset) => setOffset(offset)}\n            />\n\n        </Dashboard>\n    );\n}","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport ListIcon from '@material-ui/icons/List';\nimport PeopleIcon from '@material-ui/icons/People';\n\nexport const mainListItems = (\n    <div>\n        <ListItem button>\n            <ListItemIcon>\n                <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Dashboard\" />\n        </ListItem>\n        <ListItem button component=\"a\" href=\"/admin/entries\">\n            <ListItemIcon>\n                <ListIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Entries\" />\n        </ListItem>\n        <ListItem button component=\"a\" href=\"/admin/users\">\n            <ListItemIcon>\n                <PeopleIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Customers\" />\n        </ListItem>\n    </div>\n);","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport { mainListItems } from './listItems';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport {history} from \"react-router-guard\";\n\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\n                Your Website\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n    },\n    toolbar: {\n        paddingRight: 24, // keep right padding when drawer closed\n    },\n    toolbarIcon: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: '0 8px',\n        ...theme.mixins.toolbar,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    menuButtonHidden: {\n        display: 'none',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    drawerPaper: {\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerPaperClose: {\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(7),\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9),\n        },\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        height: 240,\n    },\n}));\n\nexport default function Dashboard(props) {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(true);\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n                <Toolbar className={classes.toolbar}>\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n                        Dashboard\n                    </Typography>\n                    <IconButton color=\"inherit\" onClick={() => {history.push('/logout')}}>\n                        <ExitToAppIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                variant=\"permanent\"\n                classes={{\n                    paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n                }}\n                open={open}\n            >\n                <div className={classes.toolbarIcon}>\n                    <IconButton onClick={handleDrawerClose}>\n                        <ChevronLeftIcon />\n                    </IconButton>\n                </div>\n                <Divider />\n                <List>{mainListItems}</List>\n            </Drawer>\n            <main className={classes.content}>\n                <div className={classes.appBarSpacer} />\n                <Container maxWidth=\"lg\" className={classes.container}>\n                    {props.children}\n                    <Box pt={4}>\n                        <Copyright />\n                    </Box>\n                </Container>\n            </main>\n        </div>\n    );\n}"],"sourceRoot":""}
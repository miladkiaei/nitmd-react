{"version":3,"sources":["RouterConfig.js","guards/checkLogin.js","guards/checkAuth.js","App.js","serviceWorker.js","index.js"],"names":["path","canActivate","props","Promise","resolve","reject","localStorage","getItem","Error","exact","component","dynamicWrapper","accessToken","expiresIn","console","log","Date","now","removeItem","routes","redirect","App","className","config","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAIe,OACX,CACIA,KAAM,SACNC,YAAa,CCPN,SAAoBC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACLC,aAAaC,QAAQ,gBAIrCF,EAAO,IAAIG,MAAM,WAFjBJ,SDIJK,OAAO,EACPC,UAAWC,aAAe,kBAAM,+DAEpC,CACIX,KAAM,UACNS,OAAO,EACPC,UAAWC,aAAe,kBAAM,mCAEpC,CACIX,KAAM,SAGNC,YAAa,CEpBN,SAAmBC,GAE9B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzB,IAAMO,EAAcN,aAAaC,QAAQ,gBACnCM,EAAYP,aAAaC,QAAQ,cACnCK,GACAE,QAAQC,IAAIC,KAAKC,MAAOJ,EAAWG,KAAKC,MAAQJ,GAEhDT,EAAQQ,KAERN,aAAaY,WAAW,gBACxBZ,aAAaY,WAAW,cAExBb,EAAO,IAAIG,MAAM,iBFQrBW,OAAQ,CACJ,CACInB,KAAM,SACNoB,SAAU,kBAEd,CACIpB,KAAM,iBACNU,UAAWC,aAAe,kBAAM,8EAEpC,CACIX,KAAM,eACNU,UAAWC,aAAe,kBAAM,kEAK5C,CACIX,KAAM,eACNoB,SAAU,KAEd,CACIpB,KAAM,IACNS,OAAO,EACPC,UAAWC,aAAe,kBAAM,uE,MGnBzBU,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAaC,OAAQA,MCRPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3b620fa5.chunk.js","sourcesContent":["import { dynamicWrapper } from \"react-router-guard\";\nimport { checkAuth/*, checkResolve*/ } from \"./guards\";\nimport checkLogin from \"./guards/checkLogin\";\n\nexport default [\n    {\n        path: \"/login\",\n        canActivate: [checkLogin],\n        exact: true,\n        component: dynamicWrapper(() => import(\"./Signin/Signin\")   ),\n    },\n    {\n        path: \"/logout\",\n        exact: true,\n        component: dynamicWrapper(() => import(\"./Signin/Signout\")   ),\n    },\n    {\n        path: \"/admin\",\n        // component: dynamicWrapper(() => import('./dashboard/pages/entries')), // file location on your project\n        // redirect: \"/admin/entries\",\n        canActivate: [checkAuth],\n        routes: [\n            {\n                path: \"/admin\",\n                redirect: \"/admin/entries\",\n            },\n            {\n                path: \"/admin/entries\",\n                component: dynamicWrapper(() => import(\"./dashboard/pages/entries/entries\")   ),\n            },\n            {\n                path: \"/admin/users\",\n                component: dynamicWrapper(() => import(\"./dashboard/pages/users\")   ),\n            },\n\n        ],\n    },\n    {\n        path: \"/:everything\",\n        redirect: \"/\"\n    },\n    {\n        path: \"/\",\n        exact: true,\n        component: dynamicWrapper(() => import(\"./Search/Search\")   ),\n    },\n\n];\n","export default function checkLogin(props) {\n    return new Promise((resolve, reject) => {\n        const accessToken = localStorage.getItem('access_token');\n        if (!accessToken) {\n            resolve();\n        } else {\n            reject(new Error('/admin'));\n        }\n    });\n}\n","export default function checkAuth(props) {\n    // props from react-router-dom\n    return new Promise((resolve, reject) => {\n        const accessToken = localStorage.getItem('access_token');\n        const expiresIn = localStorage.getItem('expires_in');\n        if (accessToken) {\n            console.log(Date.now(), expiresIn, Date.now() < expiresIn);\n            // If success you can pass data to all sub route, the sub route component can access it via props guardData\n            resolve(accessToken);\n        } else {\n            localStorage.removeItem('access_token');\n            localStorage.removeItem('expires_in');\n            // If failure you can redirect url you want.\n            reject(new Error('/login'));\n        }\n    });\n}\n","import React from 'react';\nimport './App.css';\n// import Home from './Home';\n// import About from './About';\n// import {BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link} from \"react-router-dom\";\n// import SignIn from \"./Signin/Signin\";\n// import Admin from \"./Admin/Admin\";\nimport {ToastContainer} from \"react-toastify\";\nimport config from \"./RouterConfig\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport {RouterGuard} from \"react-router-guard\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToastContainer />\n      <RouterGuard config={config} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}